/*
 * Copyright 2010 Andreas Brauchli, Ren√© Buffat, Florian Widmer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.footware.server.db;

import java.io.Serializable;

<<<<<<< HEAD
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.footware.client.pages.fields.VisualizationWidget;
=======
>>>>>>> h2
import org.footware.shared.dto.TrackVisualizationPointDTO;

/**
 * Class for ER mapping of single points of a track visualization
 */
<<<<<<< HEAD
@Entity
@Table(name = "visualization_point")
public class TrackVisualizationPoint implements Serializable {
=======
public class TrackVisualizationPoint extends DbEntity implements Serializable {
>>>>>>> h2

	private static final long serialVersionUID = 1L;
	public String getTable() {
		return "visualization_point";
	}

<<<<<<< HEAD
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(updatable = false, nullable = false)
	private long id;

	@Column(name = "x_value")
	private double xValue;

	@Column(name = "y_value")
	private double yValue;

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "visualization_id", nullable = false)
	private TrackVisualization visualization;

	/**
	 * Constructor for hibernate initialization
	 */
	public TrackVisualizationPoint() {
	}

	/**
	 * Constructor for initialization with x and y values
	 * 
	 * @param xValue
	 *            x value to set
	 * @param yValue
	 *            y value to set
	 */
	public TrackVisualizationPoint(TrackVisualization vis, double xValue,
			double yValue) {
		this.visualization = vis;
		this.xValue = xValue;
		this.yValue = yValue;
	}

	/**
	 * Gets the id of the corresponding DB row
	 * 
	 * @return the ID of the row in the DB
	 */
	public long getId() {
		return id;
	}
=======
	private double xValue;
    private double yValue;
    //@ManyToOne(fetch=FetchType.LAZY,cascade=CascadeType.ALL)
    //@JoinColumn(name="visualization_id", nullable=false)
    private TrackVisualization visualization;

    /**
     * Constructor for special initialization
     * it is advised not to use this directly
     */
    public TrackVisualizationPoint() {
    }

    /**
     * Constructor for initialization
     */
    public TrackVisualizationPoint(Long id) {
    	this.id = id;
    }

    /**
     * Constructor for initialization with x and y values
     * @param xValue x value to set
     * @param yValue y value to set
     */
    public TrackVisualizationPoint(double xValue, double yValue) {
        this.xValue = xValue;
        this.yValue = yValue;
    }
    
    public void update() {
    	//TODO
    }
>>>>>>> h2

	/**
	 * Gets the x value
	 * 
	 * @return x value
	 */
<<<<<<< HEAD
	public double getX() {
		return xValue;
	}
=======
    public double getX() {
    	return getDblValue("x_value", 0.0);
    }
>>>>>>> h2

	/**
	 * Sets the x value
	 * 
	 * @param x
	 *            value to set
	 */
<<<<<<< HEAD
	public void setX(double xValue) {
		this.xValue = xValue;
	}
=======
    public void setX(double xValue) {
    	setDblValue("x_value", 0.0);
    }
>>>>>>> h2

	/**
	 * Gets the y value
	 * 
	 * @return y value
	 */
<<<<<<< HEAD
	public double getY() {
		return yValue;
	}
=======
    public double getY() {
    	return getDblValue("y_value", 0.0);
    }
>>>>>>> h2

	/**
	 * Sets the y value
	 * 
	 * @param y
	 *            value to set
	 */
	public void setY(double yValue) {
		this.yValue = yValue;
	}

	/**
	 * Gets the DTO for this object's current state
	 * 
	 * @return DTO for this object's current state
	 */
<<<<<<< HEAD
=======
    public void setY(double yValue) {
    	setDblValue("x_value", 0.0);
    }
    
    /**
     * Gets the track visualization belonging to this point
     * @return the track visualization belonging to this point
     */
    public TrackVisualization getTrackVisualization() {
    	return new TrackVisualization(getLongValue("visualization_id", defaultId));
    }    
    
    /**
     * Sets the track visualization belonging to this point
     * @param tv the track visualization belonging to this point
     */
    public void setTrackVisualization(TrackVisualization tv) {
    	setLongValue("visualization_id", tv.getId());
    }

    /**
     * Gets the DTO for this object's current state
     * @return DTO for this object's current state
     */
>>>>>>> h2
	public TrackVisualizationPointDTO getTrackVisualizationPointDTO() {
		TrackVisualizationPointDTO p = new TrackVisualizationPointDTO();
		p.setX(getX());
		p.setY(getY());
		return p;
	}

}
